#! /usr/bin/env python3.5
from pprint import pprint
from pyglet.window import key
from pyglet import clock
from pyglet import font
import pyglet
import time
import sys
#import curses
import re
import random
from glob import glob
import imp
import os

def col_major(alist, sublen):
	"""
	Turns list to nested list (matrix)
	Keyword arguments:
	alist -- list to convert
	sublen -- length
	"""
	numrows = (len(alist)+sublen-1) // sublen
	return [alist[i::sublen] for i in range(numrows)]
def translate(cmd):
	"""
	Interprets a 8 bit binary number into a list with commands
	Keyword arguments:
	cmd -- 8 bit binary number string
	"""

	cmdD={	'1000':'ADD',
	'1001':'SHR',
	'1010':'SHL',
	'1011':'NOT',
	'1100':'AND',
	'1101':'OR',
	'1110':'XOR',
	'1111':'CMP',
	'0000':'LOAD',
	'0001':'STORE',
	'0010':'DATA',
	'0011':'JMPR',
	'0100':'JMP',
	'0101':'JMPIF',
	'0110':'CLF',
	'0111':'IO',
	}
	BIN = {'00':0,'01':1,'10':2,'11':3}
	out = []
	try:	out.append(cmdD[cmd[:4]])
	except: out.append('')
	if out[0]=='JMPIF':
		out = out+filter(lambda x: x!='0',[b if a=='1' else '0' for a,b in zip(cmd[4:8],['carry','larger','equal','zero'])])
	else:
		try:	out.append(BIN[cmd[4:6]])
		except: out.append('')
		try:	out.append(BIN[cmd[6:8]])
		except: out.append('')
	return out
def describe(game,IAR):
	"""
	get command in a human readible format
	Keyword arguments:
	game -- CPU game object
	IAR -- RAM adress
	"""
	CMD = list(map(str,translate(game.RAM[IAR])))
	if	CMD[0]=='ADD':	command = 'Add   REG'+str(CMD[1])+' to REG'+str(CMD[2])
	elif	CMD[0]=='SHL':	command = 'Shift REG'+str(CMD[1])+' left and save to REG'+str(CMD[2])
	elif	CMD[0]=='SHR':	command = 'Shift REG'+str(CMD[1])+' right and save to REG'+str(CMD[2])
	elif	CMD[0]=='NOT':	command = 'Not   REG'+str(CMD[1])+'  and save to REG'+str(CMD[2])
	elif	CMD[0]=='AND':	command = 'And REG'+str(CMD[1])+' with REG'+str(CMD[2])+' and save to REG'+str(CMD[2])
	elif	CMD[0]=='OR' :	command = 'Or REG'+str(CMD[1])+' with REG'+str(CMD[2])+' and save to REG'+str(CMD[2])
	elif	CMD[0]=='XOR':	command = 'Xor REG'+str(CMD[1])+' with REG'+str(CMD[2])+' and save to REG'+str(CMD[2])
	elif	CMD[0]=='CMP':	command = 'Compare REG'+str(CMD[1])+' with REG'+str(CMD[2])
	elif	CMD[0]=='LOAD':	command = 'Load from address in REG'+str(CMD[1])+' to REG'+str(CMD[2])
	elif	CMD[0]=='STORE':command = 'Store content in REG'+str(CMD[2])+' to adress in REG'+str(CMD[1])
	elif	CMD[0]=='DATA':	command = 'Load contents of next bit ('+str(int(game.RAM[(IAR+1)%2**8],2))+') to REG'+str(CMD[2])
	elif	CMD[0]=='JMPR':	command = 'Jump to address in REG'+str(CMD[2])
	elif	CMD[0]=='JMP':	command = 'Jump to addess in next bit ('+str(int(game.RAM[(IAR+1)%2**8],2))+')'
	elif	CMD[0]=='CLF':	command = 'Clear flags'
	elif	CMD[0]=='JMPIF':
		command = 'Jump to addess in next bit ('+str(int(game.RAM[(IAR+1)%2**8],2))+') if '+' or '.join(CMD[1:])
	elif	CMD[0]=='IO':
		if CMD[1] == '0': command = 'Take input to REG'+str(CMD[2])
		elif CMD[1] == '3': command = 'Output the content of REG'+str(CMD[2])
		else: 		command = 'None'
	else:	command='None'
	return command
def load(f=None):
	'''
	loads a save file unto the game.

	Keyword arguments:
	game -- CPU object
	f -- saved file that shoug
	'''
	DESCRIPTION = lambda: ''
	VICTORY 	= lambda: ''
	HINT		= lambda: ''
	INPUT		= lambda: []
	OUTPUT		= lambda x: [None]
	RAM			= lambda: ['00000000']*2**8
	if f!=None:
		level = imp.load_source('level', f)
		try:os.remove(f+'c')
		except:pass
		if "DESCRIPTION" in dir(level):
			DESCRIPTION = level.DESCRIPTION
		if 'HINT' in dir(level):
			HINT =  level.HINT
		if 'INPUT' in dir(level):
			INPUT = level.INPUT
		if 'OUTPUT' in dir(level):
			OUTPUT = level.OUTPUT
		if 'RAM' in dir(level):
			RAM = level.RAM
		if 'VICTORY' in dir(level):
			VICTORY = level.VICTORY
	IN = INPUT()
	game = CPU(	description=DESCRIPTION(),
				hint=HINT(),
				inputlist=IN,
				output=OUTPUT(IN),
				ram=RAM(),
				sound=beep,
				victory=VICTORY(),
				messege=messege)
	return game
def loadMenu():
	'''changes mode to load menu'''
	global MODE, KEYS_BINDINGS
	MODE,KEYS_BINDINGS = 'LEVEL LOAD',key_bindings_menu
def saveMenu():
	'''goes to the save mode menu'''
	global MODE, KEYS_BINDINGS
	MODE,KEYS_BINDINGS = 'SAVE',key_bindings_saveMenu
def loadOptMenu():
	'''goes to the options mode menu'''
	global MODE, KEYS_BINDINGS
	MODE,KEYS_BINDINGS = 'OPTIONS',key_bindings_optMenu
def unloadMenu():
	'''returns to the game mode'''
	global MODE, KEYS_BINDINGS
	MODE,KEYS_BINDINGS = 'GAME',key_bindings_game

class KEYMEM:
	def __init__(self):
		self.key_held=[]
		self.keyTime={}
		self.keyDelay=1
	def __call__(self,dt):
		for key in self.key_held:
			if not key in self.keyTime:
				self.keyTime[key]=0
		for key in list(self.keyTime):
			if not key in self.key_held:
				del self.keyTime[key]
			else:
				if self.keyTime[key]>self.keyDelay:
					shift = SHIFTKEY if SHIFT else NOSHIFTKEY
					if (key, shift) in KEYS_BINDINGS:
						if KEYS_BINDINGS[(key, shift)][0]=='':
							KEYS_BINDINGS[(key, shift)][1]()
				self.keyTime[key]+=dt
		#pprint(self.keyTime)

class STYLES:
	def __init__(self,style='Default'):
		self.load(style)
	def load(self,style='Default'):
		self.styles = imp.load_source('styles','assets/styles.py').styles
		try:os.remove('assets/styles.pyc')
		except:pass
		self.style = style
		self.instructions = open('assets/instructions.txt').read()
		self.instructionsHint = open('assets/instructionsHint.txt').read()
		self.styleNames = list(self.styles.keys())

	def __getattr__(self,att):
		if  att == 'instructions':
			return self.instructions
		elif att == 'instructionsHint':
			return self.instructionsHint
		elif not att in self.styles[self.style]:
			raise Exception('Missing '+repr(att)+' in '+self.style)
		else:
			return self.styles[self.style][att]

class MESSEGE:
	def __init__(self):
		self.MESSEGE = None
	def __call__(self,text):
		self.MESSEGE = text
	def __str__(self):
		if self.MESSEGE == None: return ''
		return self.MESSEGE
	def __nonzero__(self):
		if self.MESSEGE != None: return True
		else: return False
	def clear(self):
		self.MESSEGE = None

class SOUND:
	def __init__(self,tune = 0,vol=0.5):
		self.notes = [pyglet.media.load(x,streaming=False) for x in  sorted((glob('assets/beeps/*.wav')))][::-1]
		self.player = pyglet.media.Player()
		self.player.volume=vol

		for i in range(tune):
			self.player.queue(random.choice(self.notes))
			self.player.play()
	def __call__(self,n):
		if type(n)==str:
			self.player.queue(self.notes[int(n,2)%len(self.notes)])
		else:
			self.player.queue(self.notes[n%len(self.notes)])
		self.player.play()

	def victory(self):
		for i in [0,7,2,9,9]:
			self.player.queue(self.notes[i])
			self.player.play()

class CPU:
	def __init__(self,description='',
					hint='',
					inputlist=[],
					output = [None],
					ram = None,
					sound=None,
					messege = None,
					victory = ''):
		if ram == None: self.RAM = ['0'*8]*(2**8)
		else: 		 self.RAM = (ram + ['0'*8]*(2**8))[:2**8]
		self.ramBak = self.RAM[:]
		self.rememberRam = True
		self.hint=hint
		self.description=description
		self.expectedOut = output[:]
		self.sound	=  sound
		self.messege= messege
		self.victory= victory
		self.origRAM= self.RAM[:]
		self.fontSize	= 14
		self.run	= False
		self.speeds	= [0.01,0.1,0.25,0.5,1]
		self.speedi	= 0
		self.speed	= self.speeds [self.speedi]
		self.STEP	= 0
		self.output	= []
		self.input	= inputlist
		self.inputBak 	= inputlist[:]
		self.cursorPos	= 0
		self.IAR 	= 0
		self.IR 	= '0'*8
		self.success	= False
		#RAM = ['0'*8]*2**8
		play=False
		t0 = time.clock()
		self.registers = [	'00000000',
							'00000000',
							'00000000',
							'00000000']
		self.ACC = '0'*8
		self.flags = {'carry':0,'larger':0,'equal':0,'zero':0}
		self.highlighted  = 0
		#myscreen = curses.initscr()
		#curses.cbreak()
	def load(self,file):
		ram = open(f).read().split('\n')[:-1]
		if len(ram)>2**8:
			raise Exception('program too long, no more than 255 instructions')
			sys.exit()
		if filter(lambda x: len(x)!=8,ram)!=[]:
			raise Exception('not all commands are 8 bit')
			sys.exit()
		return ram
	def step(self,dt=0):
		if self.rememberRam:
			self.ramBak = self.RAM[:]
			self.rememberRam = False
		self.STEP += 1
		cmd = self.RAM[self.IAR]
		self.CMD = translate(self.RAM[self.IAR])
		if self.sound != None:
			self.sound(cmd[:4])
		if self.CMD[0]=='ADD':
			a = int(self.registers[self.CMD[1]],2)
			b = int(self.registers[self.CMD[2]],2)
			x = str(bin(a+b)).split('b')[-1]
			if len(x)>8:
				self.flags['carry']=1
				self.registers[self.CMD[2]]=x[-8:]
			else:
				self.registers[self.CMD[2]]=x.rjust(8,'0')
			self.IAR += 1
			self.IAR  = self.IAR%2**8
		if self.CMD[0]=='SHR':
			self.registers[self.CMD[2]] = ('0'+self.registers[self.CMD[1]])[:8]
			self.IAR += 1
			self.IAR  = self.IAR%2**8
		if self.CMD[0]=='SHL':
			self.registers[self.CMD[2]] = (self.registers[self.CMD[1]]+'0')[-8:]
			self.IAR += 1
			self.IAR  = self.IAR%2**8
		if self.CMD[0]=='NOT':
			self.registers[self.CMD[2]]= ''.join(['1' if x=='0' else '0' for x in  self.registers[self.CMD[1]] ])
			self.IAR += 1
			self.IAR  = self.IAR%2**8
		if self.CMD[0]=='AND':
			self.registers[self.CMD[2]]= ''.join(['1' if a+b=='11' else '0' for a,b in  zip(self.registers[self.CMD[1]],self.registers[self.CMD[2]]) ])
			self.IAR += 1
			self.IAR  = self.IAR%2**8
		if self.CMD[0]=='OR':
			self.registers[self.CMD[2]]= ''.join(['1' if '1' in [a,b] else '0' for a,b in  zip(self.registers[self.CMD[1]],self.registers[self.CMD[2]]) ])
			self.IAR += 1
			self.IAR  = self.IAR%2**8
		if self.CMD[0]=='XOR':
			self.registers[self.CMD[2]]= ''.join(['1' if a+b in ['10','01'] else '0' for a,b in  zip(self.registers[self.CMD[1]],self.registers[self.CMD[2]]) ])
			self.IAR += 1
			self.IAR  = self.IAR%2**8
		if self.CMD[0]=='CMP':
			a = self.registers[self.CMD[1]]
			b = self.registers[self.CMD[2]]
			if a==b: 		self.flags['equal']='1'
			if int(a,2)>int(b,2):	self.flags['larger']='1'
			if a == '0'*8:		self.flags['zero']='1'
			self.IAR += 1
			self.IAR  = self.IAR%2**8
		if self.CMD[0]=='LOAD':
			self.registers[self.CMD[2]] = self.RAM[int(self.registers[self.CMD[1]],2)]
			self.IAR += 1
			self.IAR  = self.IAR%2**8
		if self.CMD[0]=='STORE':
			self.RAM[int(self.registers[self.CMD[1]],2)] = self.registers[self.CMD[2]]
			self.IAR += 1
			self.IAR  = self.IAR%2**8
		if self.CMD[0]=='DATA':
			self.registers[self.CMD[2]]=self.RAM[(self.IAR+1)%2**8]
			self.IAR += 2
			self.IAR  = self.IAR%2**8
			if self.sound != None:
				self.sound(cmd[-4:])
		if self.CMD[0]=='JMPR':
			self.IAR = int(self.registers[self.CMD[2]],2)
		if self.CMD[0]=='JMP':
			self.IAR = int(self.RAM[(self.IAR+1)%2**8],2)
			if self.sound != None:
				self.sound(cmd[-4:])
		if self.CMD[0]=='JMPIF':
			for flag in self.CMD[1:]:
				if self.flags[flag]=='1':
					self.IAR = int(self.RAM[(self.IAR+1)%2**8],2)
					return None
			self.IAR += 2
			self.IAR  = self.IAR%2**8
		if self.CMD[0]=='CLF':
			self.flags = {'carry':0,'larger':0,'equal':0,'zero':0}
			self.IAR += 1
			self.IAR  = self.IAR%2**8
		if self.CMD[0]=='IO':
			a,b=self.CMD[1],self.CMD[2]
			if a==0:	#INPUT TO REGB
				if self.input==[]:
					self.registers[b]='0'*8
				else:
					self.registers[b]=self.input.pop(0)
			if a==3:	#output from REGB
				self.output.append(self.registers[b])
			self.IAR += 1
			self.IAR  = self.IAR%2**8
		if not self.success:
			if self.output == self.expectedOut:
				self.success=True
				if self.run: self.play()
				if self.sound != None:
					self.sound.victory()
				if self.messege != None:
					if self.STEP == 1:
						text = 'Task complete in '+str(self.STEP)+' step.\n'+self.victory
					else:
						text = 'Task complete in '+str(self.STEP)+' steps.\n'+self.victory
					self.messege(text)
	def inputLoad(self,input):
		self.input,self.inputBak = input, input
	def action_upHighlighted(self,n=1):
		self.highlighted=(self.highlighted-n)%2**8
		self.cursorPos = 0
	def action_downHighlighted(self,n=1):
		self.highlighted=(self.highlighted+n)%2**8
		self.cursorPos = 0
	def action_leftCursor(self):
		self.cursorPos = (self.cursorPos-1)%8
	def action_rightCursor(self):
		self.cursorPos = (self.cursorPos+1)%8
	def action_0(self):
		cmd = list(self.RAM[self.highlighted])
		cmd[self.cursorPos]='0'
		self.RAM[self.highlighted]=''.join(cmd)
		self.cursorPos = (self.cursorPos+1)%8
	def action_1(self):
		cmd = list(self.RAM[self.highlighted])
		cmd[self.cursorPos]='1'
		self.RAM[self.highlighted]=''.join(cmd)
		self.cursorPos = (self.cursorPos+1)%8
	def action_speedUp(self):
		if self.speedi > 0:
			self.speedi = self.speedi-1
		self.speed = self.speeds[self.speedi]
		if self.run:
			clock.unschedule(self.step)
			clock.schedule_interval(self.step,self.speed)
	def action_speedDown(self):
		if len(self.speeds)-1 > self.speedi:
			self.speedi = self.speedi+1
		self.speed = self.speeds[self.speedi]
		if self.run:
			clock.unschedule(self.step)
			clock.schedule_interval(self.step,self.speed)
	def reset(self):
		self.IAR = 0
		self.IR  = '0'*8
		self.STEP = 0
		#RAM = ['0'*8]*2**8
		self.registers = [		'00000000',
						'00000000',
						'00000000',
						'00000000']
		self.ACC = '0'*8
		self.flags = {'carry':0,'larger':0,'equal':0,'zero':0}
		self.output=[]
		self.input = self.inputBak[:]
		self.RAM = self.ramBak
		self.rememberRam = True
		if self.run: self.play()
	def resetRAM(self):
		self.reset()
		self.RAM = self.origRAM
	def play(self):
		self.run = not(self.run)
		if self.run:
			clock.schedule_interval(self.step,self.speed)

		else:
			clock.unschedule(self.step)

class LEVELMENU:
	def __init__(self,game):
		self.game=game
		self.modes = ['LEVEL','EXAMPLE']
		self.sel = [0]*len(self.modes)
		self.modeSelected = 0
		self.selected = self.sel[self.modeSelected]
		self.refresh()
	def refresh(self):
		self.selected = self.sel[self.modeSelected]
		self.mode = self.modes[self.modeSelected]
		self.files = sorted(glob('levels/'+self.mode+'*.cpu'))
		self.names = [x.split(self.mode)[-1].replace('.cpu','') for x in self.files]
	def select(self):
		selected = self.files[self.selected]
		unloadMenu()
		newGame = load(selected)
		for att,value in newGame.__dict__.items():
			self.game.__dict__[att]=value
	def up(self):
		self.sel[self.modeSelected] =(self.sel[self.modeSelected]+1)%len(self.files)
		self.refresh()
	def down(self):
		self.sel[self.modeSelected] =(self.sel[self.modeSelected]-1)%len(self.files)
		self.refresh()
	def left(self):
		self.modeSelected=(self.modeSelected-1)%len(self.modes)
		self.refresh()
	def right(self):
		self.modeSelected=(self.modeSelected+1)%len(self.modes)
		self.refresh()
	def get_next(self):
		if len(self.files)<self.selected+1:
			selected = 'levels/credits.cpu'
		else:
			self.selected+=1
			selected = self.files[self.selected]
		newGame = load(selected)
		for att,value in newGame.__dict__.items():
			self.game.__dict__[att]=value

class GAMEMENU:
	def __init__(self,game,sound,styles):
		self.sound = sound
		self.styles = styles
		fonts = [x.replace('assets/','').replace('.ttf','') for x in glob('assets/*.ttf')]
		self.options = [
			[
			'Volume',	10,	[i*5 for i in range(21)]
			],
			[
			'Style', self.styles.styleNames.index(self.styles.style),
			self.styles.styleNames
			],
			[
			'Font', 0, fonts
			]
			]
		self.sel = 0

	def __call__(self):
		pass
	def up(self):
		self.sel = (self.sel-1)%len(self.options)

	def down(self):
		self.sel = (self.sel+1)%len(self.options)
	def left(self):
		if self.options[self.sel][1]>0:
			self.options[self.sel][1]=self.options[self.sel][1]-1
	def right(self):
		if self.options[self.sel][1]<(len(self.options[self.sel][2])-1):
			self.options[self.sel][1]=self.options[self.sel][1]+1
	def select(self):
		for a,b,c in self.options:
			if a=='Volume':
				self.sound.player.volume=c[b]/100.0
			if a=='Style':
				self.styles.load(c[b])
			if a=='Font':
				global font
				pyglet.font.add_file('assets/'+c[b]+'.ttf')
				font = c[b]

SHIFT=False
beep = SOUND(tune=0)
messege = MESSEGE()
game = CPU(sound=beep,messege = messege)
menu = LEVELMENU(game)
style = STYLES()
optMenu = GAMEMENU(game,beep,style)

SHIFTKEY,NOSHIFTKEY=17,16
displayIO=[	lambda x: x,
			lambda x: str(int(x,2))]

key_bindings_game={
	(key.H,NOSHIFTKEY)	:('Help',		lambda :display.append(display.pop(0))),
	(key.H,SHIFTKEY)	:('Help',		lambda :display.insert(0,display.pop())),
	(key.UP,NOSHIFTKEY)	:('',			game.action_upHighlighted),
	(key.DOWN,NOSHIFTKEY)	:('',			game.action_downHighlighted),
	(key.LEFT,NOSHIFTKEY)	:('',			game.action_leftCursor),
	(key.RIGHT,SHIFTKEY)	:('',			lambda :game.action_downHighlighted(16)),
	(key.LEFT,SHIFTKEY)	:('',			lambda :game.action_upHighlighted(16)),
	(key.RIGHT,NOSHIFTKEY)	:('',			game.action_rightCursor),
	(key.NUM_0,NOSHIFTKEY)	:('',			game.action_0),
	(key.NUM_1,NOSHIFTKEY)	:('',			game.action_1),
	(key._0,NOSHIFTKEY)		:('',			game.action_0),
	(key._1,NOSHIFTKEY)		:('',			game.action_1),
	(key.ENTER,NOSHIFTKEY)	:('Step',		game.step),
	(key.R,NOSHIFTKEY)		:('Reset',		game.reset),
	(key.R,SHIFTKEY)		:('ResetRAM',	game.resetRAM),
	#(65451,NOSHIFTKEY)		:('Speed+',		game.action_speedUp),
	#(43,NOSHIFTKEY)			:('Speed+',		game.action_speedUp),
	#(65453,NOSHIFTKEY)		:('Speed-',		game.action_speedDown),
	#(45,NOSHIFTKEY)			:('Speed-',		game.action_speedDown),
	(key.SPACE,NOSHIFTKEY)	:('Play/Pause',	game.play),
	(key.L,NOSHIFTKEY)		:('Load',		lambda : loadMenu()),
	(key.S,NOSHIFTKEY)		:('save',		lambda : saveMenu()),
	(key.M,NOSHIFTKEY)		:('Menu',		lambda : loadOptMenu()),
	(key.I,NOSHIFTKEY)		:('IOdisplay',	lambda : displayIO.append(displayIO.pop(0))),
	}
key_bindings_saveMenu={
	(key.UP,NOSHIFTKEY)		:('',			menu.up),
	(key.DOWN,NOSHIFTKEY)	:('',			menu.down),
	(key.RIGHT,NOSHIFTKEY)	:('',			menu.right),
	(key.LEFT,NOSHIFTKEY)	:('',			menu.left),
	(key.ENTER,NOSHIFTKEY)	:('select',		menu.select),
	(key.L,NOSHIFTKEY)		:('back',		lambda : unloadMenu()),
	(key.BACKSPACE,NOSHIFTKEY):('back',		lambda : unloadMenu()),
	}
key_bindings_optMenu={
	(key.UP,NOSHIFTKEY)		:('',			optMenu.up),
	(key.DOWN,NOSHIFTKEY)	:('',			optMenu.down),
	(key.RIGHT,NOSHIFTKEY)	:('',			optMenu.right),
	(key.LEFT,NOSHIFTKEY)	:('',			optMenu.left),
	(key.ENTER,NOSHIFTKEY)	:('back',		lambda : [unloadMenu(),optMenu.select()]),
	(key.M,NOSHIFTKEY)		:('back',		lambda : [unloadMenu(),optMenu.select()]),
	(key.BACKSPACE,NOSHIFTKEY):('back',		lambda : [unloadMenu(),optMenu.select()]),
	}
key_bindings_messege={
	(key.BACKSPACE,NOSHIFTKEY)	:('OK',		lambda: messege.clear()),
	(key.ENTER,NOSHIFTKEY)		:('Next',	lambda: [messege.clear(),menu.get_next()])
	}
key_bindings_menu={
	(key.UP,NOSHIFTKEY)		:('',			menu.up),
	(key.DOWN,NOSHIFTKEY)	:('',			menu.down),
	(key.RIGHT,NOSHIFTKEY)	:('',			menu.right),
	(key.LEFT,NOSHIFTKEY)	:('',			menu.left),
	(key.ENTER,NOSHIFTKEY)	:('Select',		lambda : [unloadMenu(),menu.select()]),
	(key.L,NOSHIFTKEY)		:('back',		lambda : unloadMenu()),
	(key.BACKSPACE,NOSHIFTKEY):('back',		lambda : unloadMenu()),
	}
KEYS_BINDINGS = key_bindings_game
display=['HELP','DESCRIPTION']
pyglet.font.add_file('assets/Andale-Mono.ttf')
Font = 'Andale-Mono.ttf'
window = pyglet.window.Window()

pyglet.gl.glClearColor(*style.background)
screen_elements={}
prev_elements=screen_elements.copy()
MESSEGE = None

#loadMenu()
MODE = 'GAME'
@window.event
def on_draw():
	pyglet.gl.glClearColor(*style.background)
	window.clear()
	X=window.width//100
	Y=window.height//100
	font_size=window.width//115
	#print(repr(str(messege)))
	if str(messege) != '' :
		global KEYS_BINDINGS
		KEYS_BINDINGS = key_bindings_messege
		lines = []
		line = ''
		length = 120
		for word in str(messege).split(' '):
			if len(line)+len(word)>length:
				lines.append(line[:-1])
				line = ''
			line += word+' '
		lines.append(line)
		lines = '\n'.join(lines).split('\n')
		for n,line in enumerate(lines):
			pyglet.text.Label(
                        	line,
    	                	x=window.width*.2,
            	        	y=window.height*0.8-n*(window.height*0.05),
                    		font_size=font_size*2,
                    		font_name=Font,
							color=style.messegeCol
                    		).draw()
	elif MODE == 'GAME':
		global KEYS_BINDINGS
		KEYS_BINDINGS = key_bindings_game
		global screen_elements
		global prev_elements
		IAR = game.IAR
		# RAM
		for y,col in enumerate(col_major(game.RAM,16)):
			for x,bit in enumerate(col):
				num	= y+x*16
				NAME	= 'RAM'+str(y+x*16)
				VAL	= bit
				if not  NAME in screen_elements:
					X	= window.width//16*x
					Y 	= window.height//50*(-y*2)+window.height//10*9
					FS 	= font_size
					LABEL	= pyglet.text.Label(
							VAL,
		        			x=X,
							y=Y,
							font_size=FS,
							font_name='assets/Cousine-Italic.ttf',
							color=style.RAMcol
		        				)
					screen_elements[NAME]=LABEL
				elif screen_elements[NAME].text!=VAL:
					screen_elements[NAME].text=VAL
				screen_elements[NAME].draw()

				num	= y+x*16
				NAME	= 'nRAM'+str(y+x*16)
				VAL	= str(num)
				if not  NAME in screen_elements:
					X	= window.width//16*x
					Y 	= window.height//50*(-y*2+1)+window.height//10*9
					FS 	= font_size
					LABEL	= pyglet.text.Label(
							VAL,
	        				x=X,
							y=Y,
							font_size=FS,
							color=style.nRAMcol
		        				)
					screen_elements[NAME]=LABEL
				elif screen_elements[NAME].text!=VAL:
					screen_elements[NAME].text=VAL
				screen_elements[NAME].draw()
		#IAR+STEP
		for n,thing in enumerate([	('IAR' ,game.IAR),
						('STEP',game.STEP),
						('speed',game.speed)]):
			title,num=thing
			NAME 	= title
			VAL	= title+': '+str(num)
			if not  NAME in screen_elements:
				X	= window.width//8*n+window.width//100
				Y	= window.height//20*19
				FS	= font_size*2
				LABEL	= pyglet.text.Label(
						VAL,
						x=X,
						y=Y,
						font_size=FS,
						color=style.IAR
						)
				screen_elements[NAME]=LABEL
			elif screen_elements[NAME].text!=VAL:
				screen_elements[NAME].text=VAL
			screen_elements[NAME].draw()
		#REGISTERS
		for n,register in enumerate(game.registers):
			NAME	= 'REG'+str(n)
			VAL	= register
			X	= window.width//100
			Y	= window.height//50*(-n*2)+window.height//10*2
			FS	= font_size*2
			LABEL	= pyglet.text.Label(
					NAME+': '+VAL,
					x=X,y=Y,
					font_size=FS,
					color=style.REG
					)
			LABEL.draw()
			screen_elements[NAME]=(VAL,X,Y,FS,LABEL)
		#FLAGS
		n=0
		for flag,value in game.flags.items():
			NAME	= flag+':'*(7-len(flag))
			VAL	= str(value)
			X	= window.width//100*33
			Y	= window.height//50*(-n*2)+window.height//10*2
			FS	= font_size*2
			LABEL	= pyglet.text.Label(
					NAME+': '+VAL,
					x=X,y=Y,
					font_size=FS,
					color=style.flags
					)
			LABEL.draw()
			screen_elements[NAME]=(VAL,X,Y,FS,LABEL)
			n+=1
		a,b,c=window.width*.44,window.height*0.048,window.height*0.28*0.98
		pyglet.graphics.draw(2, pyglet.gl.GL_LINES, ('v2f', (	a,b,a,c)))
		pyglet.graphics.draw(2, pyglet.gl.GL_LINES, ('v2f', (	0,b,window.width,b)))

		#describe curr AIR
		LABEL	= pyglet.text.Label(
				describe(game,IAR),
				x=window.width//100,
				y=window.height//50*(1*2)+window.height//10*2,
				font_size=font_size*2,
				color=style.currCMD
				)
		LABEL.draw()
		#describe curr selected
		LABEL	= pyglet.text.Label(
				str(int(game.RAM[game.highlighted],2))+'::'+describe(game,game.highlighted),
				x=window.width//10*4,
				y=window.height//20*19,
				font_size=font_size*2,
				color=style.selCMD
				)
		LABEL.draw()
		height = window.height*0.94
		pyglet.graphics.draw(2, pyglet.gl.GL_LINES, ('v2f', (	0,height,window.width,height)))

		#CURRENT IAR
		for _ in '_':
			IARx = screen_elements['RAM'+str(IAR)].x
			IARy = screen_elements['RAM'+str(IAR)].y
			a,b = IARx,IARy
			c=IARx+ window.width//16
			d=IARy+ window.height//50
			pyglet.graphics.draw(2, pyglet.gl.GL_LINES, ('v2f', (	a,b,c,b)))
			pyglet.graphics.draw(2, pyglet.gl.GL_LINES, ('v2f', (	a,b,a,d)))
			pyglet.graphics.draw(2, pyglet.gl.GL_LINES, ('v2f', (	a,d,c,d)))
			pyglet.graphics.draw(2, pyglet.gl.GL_LINES, ('v2f', (	c,b,c,d)))
		#SELECTED
		for _ in '_':
			headLabel=screen_elements['RAM'+str(game.highlighted)]
			cmd = list(game.RAM[game.highlighted])
			cmd[game.cursorPos]='_'
			cmd = ''.join(cmd)
			LABEL	= pyglet.text.Label(
					cmd,
					x=headLabel.x,
					y=headLabel.y,
					font_size=headLabel.font_size,
					font_name=Font,
					color=style.selCol
					)
			LABEL.draw()
		#help
		if display[0]=='HELP':
			if SHIFT:
				lines = style.instructionsHint.split('\n')
				n=0
				rows = 8
				for line in lines:
					pyglet.text.Label(
		                        	line,
		                        	x=window.width*.45,
		                        	y=window.height//4-n*window.height//(4*(rows+1)),
		                        	font_size=font_size*1.5,
		                        	font_name=Font,
									color=style.help
		                        	).draw()
					n+=1
			else:
				lines = style.instructions.split('\n')
				n=0
				j=0
				rows = 8
				for line in lines:
					pyglet.text.Label(
		                        	line,
		                        	x=window.width*.45+j*window.width*(1-0.45)//(2),
		                        	y=window.height//4-n*window.height//(4*(rows+1)),
		                        	font_size=font_size*1.5,
		                        	font_name=Font,
									color=style.help
		                        	).draw()
					n+=1
					if n>=rows:
						n=0
						j+=1
		elif display[0]=='DESCRIPTION':
			if SHIFT:
				text = 'Hint: '+game.hint
			else:
				text = game.description
			width = 50
			TEXT =''
			count = 0
			for word in text.split():
				if count + len(word)>width:
					TEXT += '\n'+word
					count = 0
				else:
					TEXT += ' '+word
					count += len(word)
			TEXT = TEXT[1:]

			for n,line in enumerate(TEXT.split('\n')):
				pyglet.text.Label(
	                        	line,
	    	                	x=window.width*.45,
	            	        	y=window.height//4-n*window.height//(4*(8+1)),
	                    		font_size=font_size*1.5,
	                    		font_name=Font,
								color=style.description
	                    		).draw()

		#IO
		for _ in '_':
			input = list(map(displayIO[0],game.input))
			output= list(map(displayIO[0],game.output))
			height = window.height*0.28
			size = 60
			try: input = input[:size//(max(map(len,input))+1)]
			except: input=['']
			try: 	output = output[::-1][:size//(max(map(len,output))+1)]
			except:	output=['']
			items = max(map(len,[input,output]))
			for n,x in enumerate(input):
				pyglet.text.Label(
	                        	' '+x,
	    	                	x=window.width*.5-(n+1)*window.width*0.5/items,
	            	        	y=height,
	                    		font_size=font_size*1.2,
	                    		font_name=Font,
								color=style.input
	                    		).draw()
			for n,x in enumerate(output):
				pyglet.text.Label(
	                        	' '+x,
	    	                	x=window.width*.505+(n)*window.width*0.5/items,
	            	        	y=height,
	                    		font_size=font_size*1.2,
	                    		font_name=Font,
								color=style.output
	                    		).draw()
			a,b,c,d = window.width*.495,window.width*.505,height*1.1,height*0.98
			pyglet.graphics.draw(2, pyglet.gl.GL_LINES, ('v2f', (	0,d,window.width,d)))
			pyglet.graphics.draw(2, pyglet.gl.GL_LINES, ('v2f', (	0,c,window.width,c)))
			pyglet.graphics.draw(2, pyglet.gl.GL_LINES, ('v2f', (	b,c,b,d)))
			pyglet.graphics.draw(2, pyglet.gl.GL_LINES, ('v2f', (	a,c,a,d)))

		prev_elements=screen_elements.copy()

	elif MODE == 'LEVEL LOAD':
		levels = menu.names
		selected = menu.selected
		for n,level in enumerate(levels):
			LABEL = pyglet.text.Label(
				level.replace('levels/','').replace('.cpu',''),
				x=window.width//4,
				y=window.height//2+(n-selected)*window.height//40,
				font_size=font_size*1.7,
				color= style.levelSel if selected==n else  style.levelUnsel ,
				#background_color=(255,255,255,0),
					)
			LABEL.draw()
		LABEL = pyglet.text.Label(
			menu.mode,
			x=window.width*0.15,
			y=window.height*.8,
			font_size=font_size*1.7,
			color= style.levelName
			)
		LABEL.draw()

	elif MODE == 'OPTIONS':
		for n,x in  enumerate(optMenu.options):
			a,b,c = x
			pyglet.text.Label(
				a,
				x=window.width*0.2,
				y=window.height*.8 - n * (window.height//15),
				font_size=font_size*2,
				color=style.OptNameSel if n==optMenu.sel else  style.OptNameUnSel,
					).draw()
			wordWidth = max(map(len,map(str,c)))*window.width//80
			for j in range(len(c)):
				pyglet.text.Label(
					str(c[j]),
					x=window.width*0.25 + (j-b)*wordWidth,
					y=window.height*.8 - (n+0.5) * window.height//15,
					font_size=font_size*2,
					color=style.OptOptionSel if j==b else  style.OptOptionUnSel ,
						).draw()
	#bottom
	for _ in '_':
		n,c=0,0
		rows=2
		if SHIFT: 	KEYS = list(filter(lambda x:x[1]==SHIFTKEY ,KEYS_BINDINGS))
		else:		KEYS = list(filter(lambda x:x[1]==NOSHIFTKEY ,KEYS_BINDINGS))
		KEYS = dict(zip(KEYS, [KEYS_BINDINGS[x] for x in KEYS]))
		KEYS = dict((a[0],b[0]) for a,b in KEYS.items())
		cols = (len(set([x for x in KEYS.values()]))-1)/rows
		cols = 4
		for func in sorted(set(KEYS.values())):
			if func=='':continue
			keys = filter(lambda x: KEYS[x]==func,KEYS)
			func = func
			#mods = [k[1] for k in keys]
			keys = [key._key_names[k] for k in keys]
			keys = [k.upper() if SHIFT else k.lower() for k in (keys)]
			keys = ' '+' '.join(list(filter(lambda x: 'NUM' not in x, keys))+list(filter(lambda x: 'NUM_' in x,keys)))
			keys = keys.replace('NUM_','').replace('num_','').replace('_','')
			keys = ' '.join(set(keys.split()))
			LABEL = pyglet.text.Label(	func,
										x=c*window.width//(cols+1),
										y=0*window.height//40+(n+0.2)*window.height//40,
										font_size=font_size*1.1,
										color=style.keyFunction,
										#background_color=(255,255,255,0),
										)
			LABEL.draw()
			LABEL = pyglet.text.Label(	keys,
										x=(.9+2*c)*window.width//(2*(cols+1)),
										y=0*window.height//40+(n+0.2)*window.height//40,
										font_size=font_size*1.1,
										color=style.keyBinding,
										#background_color=(255,255,255,0),
										)
			LABEL.draw()
			n+=1
			if n>=rows:
				n=0
				c+=1



keyMem=KEYMEM()
clock.schedule_interval(keyMem, 0.02)
@window.event
def on_key_press(symbol, modifiers):
	#if symbol == key.H:
	#	display.append(display.pop(0))
	keyMem.key_held.append(symbol)
	#print(key_held)
	if (symbol,modifiers) in KEYS_BINDINGS:
		KEYS_BINDINGS[(symbol,modifiers)][1]()

	else:
		print(key._key_names[symbol],modifiers)
	if symbol in [key.LSHIFT,key.RSHIFT]:
		global SHIFT
		SHIFT = True
@window.event
def on_key_release(symbol, modifiers):
	if symbol in keyMem.key_held:
		keyMem.key_held.remove(symbol)
	if symbol in [key.LSHIFT,key.RSHIFT]:
		global SHIFT
		SHIFT = False

@window.event
def on_resize(width, height):
	global screen_elements
	global prev_elements
	screen_elements,prev_elements = {},{}



#@window.event
#def on_mouse_motion(x, y, dx, dy):
#    pass
#    #print x,y
#
#@window.event
#def on_mouse_press(x, y, button, modifiers):
#    	#print x,y,button,modifiers
#	pass

pyglet.app.run()
